name: Jar build

on:
  workflow_dispatch:
  schedule:
  # * is a special character in YAML so you have to quote this string
      - cron:  '0 18 * * 0'
jobs:
  build:
    runs-on: ${{ matrix.config.os }}-latest
    strategy:
        matrix:
          config:
          - { name: "Windows MingW", os: windows, cc: "gcc", cxx: "g++", generator: "MinGW Makefiles", cmake_extra_options: "-Denable_lto=OFF" }
          - { name: "Ubuntu gcc", os: ubuntu, cc: "gcc", cxx: "g++", generator: "Unix Makefiles", cmake_extra_options: "-DLTO_EXTRA_FLAG=auto" }
          - { name: "MacOS clang", os: macos, cc: "clang", cxx: "clang++", generator: "Unix Makefiles", cmake_extra_options: "-DLTO_EXTRA_FLAG=auto" }
    steps:
    - uses: actions/checkout@v2
     # install dependencies
    - name: Init options
      run: |
          echo "CC=${{ matrix.config.cc }}"   >> $GITHUB_ENV
          echo "CXX=${{ matrix.config.cxx }}" >> GITHUB_ENV
    - name: Install boost on ubuntu
      if: matrix.config.os == 'ubuntu'
      run: sudo apt-get update && sudo apt-get install -yq libboost-dev
    - name: Install boost on macos
      if: matrix.config.os == 'macos'
      run: brew install boost
    - name: Install boost and gcc on windows
      if: matrix.config.os == 'windows'
      run: |
        Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
        (Get-Content ~\scoop\buckets\main\bucket\gcc.json).replace('http://repo.msys2.org/', 'http://mirrors.huaweicloud.com/msys2/') | Set-Content  ~\scoop\buckets\main\bucket\gcc.json
        scoop install gcc --global
        If ((Test-Path "C:\hostedtoolcache\windows\Boost") -eq $False){
          # Use the boost-1.72.0-win32-msvc14.1-x86_64.tar.gz for Windows 2016
          $url = "https://github.com/actions/boost-versions/releases/download/1.72.0-20200608.4/boost-1.72.0-win32-msvc14.2-x86_64.tar.gz"
          (New-Object System.Net.WebClient).DownloadFile($url, "$env:TEMP\boost.tar.gz")
          7z.exe x "$env:TEMP\boost.tar.gz" -o"$env:TEMP\boostArchive" -y | Out-Null
          7z.exe x "$env:TEMP\boostArchive" -o"$env:TEMP\boost" -y | Out-Null
          Push-Location -Path "$env:TEMP\boost"
          Invoke-Expression .\setup.ps1
        }
        echo "BOOST_ROOT=C:\hostedtoolcache\windows\Boost\1.72.0\x86_64" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "BOOST_INCLUDEDIR=C:\hostedtoolcache\windows\Boost\1.72.0\x86_64\boost\include" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "BOOST_LIBRARYDIR=C:\hostedtoolcache\windows\Boost\1.72.0\x86_64\lib" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
    - name: Build jar with Cmake
      run: |
          mkdir build
          cd build
          cmake -Denable_documentation=OFF -Denable_java=ON -Denable_msg=ON -Denable_lib_in_jar=ON -Dminimal-bindings=ON -Denable_compile_optimizations=ON -Denable_smpi=OFF ${{ matrix.config.cmake_extra_options }} -G "${{ matrix.config.generator }}" ..
          make -j2 simgrid-java_jar
    - name: Upload jar
      uses: actions/upload-artifact@v2
      with:
          name: jar-${{ matrix.config.os }}
          path: build/simgrid.jar
    - name: Create the failure Message
      if: ${{ failure() }}
      run: |
        echo "{\"attachments\": [{\"color\": \"#FF0000\", \"text\":\"Failure when building JAR file on ${{ matrix.config.name }}! See ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} \"}]}" > mattermost.json
    - uses: mattermost/action-mattermost-notify@master
      if: ${{ failure() }}
      env:
        MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
        MATTERMOST_CHANNEL: ${{ secrets.MATTERMOST_CHANNEL}}
  create_jar:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download all jars from ubuntu
        uses: actions/download-artifact@v2
      - name: Build final jar
        run: |
           patch=$(grep -r set\(SIMGRID_VERSION_PATCH ./CMakeLists.txt | sed 's/.*"\([[:digit:]]\+\)".*/\1/g')
           major=$(grep -r set\(SIMGRID_VERSION_MAJOR ./CMakeLists.txt | sed 's/.*"\([[:digit:]]\+\)".*/\1/g')
           minor=$(grep -r set\(SIMGRID_VERSION_MINOR ./CMakeLists.txt | sed 's/.*"\([[:digit:]]\+\)".*/\1/g')
           if [ $patch -ne 0 ]; then
             version="$major.$minor.$patch"
           else
             version="$major.$minor"
           fi
           mkdir content
           cd content
           for j in  ubuntu macos windows ; do unzip -n ../jar-$j/simgrid.jar ; done
           strip NATIVE/*/*/*.so
           x86_64-linux-gnu-strip NATIVE/*/*/lib*dll
           zip -r ../simgrid-${version}.jar *
      - name: Upload jar
        uses: actions/upload-artifact@v2
        with:
          name: jar-final
          path: simgrid-*.jar
      - name: cleanup artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            jar-ubuntu
            jar-windows
            jar-macos
      - name: Create the failure Message
        if: ${{ failure() }}
        run: |
          echo "{\"attachments\": [{\"color\": \"#FF0000\", \"text\":\"Failure when assembling JAR file ! See ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} \"}]}" > mattermost.json
      - name: Create the success Message
        if: ${{ success() }}
        run: |
          echo "{\"attachments\": [{\"color\": \"#00FF00\", \"text\":\"JAR file built successfully ! You can get it on: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} \"}]}" > mattermost.json
      - uses: mattermost/action-mattermost-notify@master
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          MATTERMOST_CHANNEL: ${{ secrets.MATTERMOST_CHANNEL}}
