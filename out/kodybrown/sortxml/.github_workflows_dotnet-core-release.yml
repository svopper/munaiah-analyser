name: dotnet-core-release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # dotnet: [ '2.2.x', '3.0.x', '3.1.x' ]
        dotnet: [ '3.1.202' ]
    name: dotnet core ${{ matrix.dotnet }}
    steps:
      - name: Get variables
        run: |
          echo ::set-env name=APP_NAME::sortxml
          echo ::set-env name=TAG_NAME::${GITHUB_REF#refs/*/}

      - name: Get source
        uses: actions/checkout@master

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.4.0
        with:
          dotnet-version: ${{ matrix.dotnet }}

      # - name: Restore
      #   run: dotnet restore

      # - name: Build
      #   run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --verbosity normal

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: "Publish: win-x64"
        run: |
          dotnet restore --runtime win-x64
          dotnet publish --nologo --configuration Release --runtime win-x64 --framework netcoreapp3.1 --output ./win-x64/ --self-contained false
          zip --junk-paths ./${{ env.APP_NAME }}-win-x64-${{ env.TAG_NAME }}.zip ./win-x64/*

      - name: "Upload: win-x64"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.APP_NAME }}-win-x64-${{ env.TAG_NAME }}.zip
          asset_name: ${{ env.APP_NAME }}-win-x64-${{ env.TAG_NAME }}.zip
          asset_content_type: application/zip

      - name: "Publish: win-x86"
        run: |
          dotnet restore --runtime win-x86
          dotnet publish --nologo --configuration Release --runtime win-x86 --framework netcoreapp3.1 --output ./win-x86/ --self-contained false
          zip -o -7 --junk-paths ./${{ env.APP_NAME }}-win-x86-${{ env.TAG_NAME }}.zip ./win-x86/*

      - name: "Upload: win-x86"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.APP_NAME }}-win-x86-${{ env.TAG_NAME }}.zip
          asset_name: ${{ env.APP_NAME }}-win-x86-${{ env.TAG_NAME }}.zip
          asset_content_type: application/zip

      - name: "Publish: win-arm"
        run: |
          dotnet restore --runtime win-arm
          dotnet publish --nologo --configuration Release --runtime win-arm --framework netcoreapp3.1 --output ./win-arm/ --self-contained false
          zip -o -7 --junk-paths ./${{ env.APP_NAME }}-win-arm-${{ env.TAG_NAME }}.zip ./win-arm/*

      - name: "Upload: win-arm"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.APP_NAME }}-win-arm-${{ env.TAG_NAME }}.zip
          asset_name: ${{ env.APP_NAME }}-win-arm-${{ env.TAG_NAME }}.zip
          asset_content_type: application/zip

      # - name: "Publish: win-x64-self-contained"
      #   run: |
      #     dotnet restore
      #     dotnet publish --nologo --configuration Release --runtime win-x64 --framework netcoreapp3.1 --output ./win-x64-self-contained/ --self-contained true
      #     zip --junk-paths ./${{ env.APP_NAME }}-win-x64-self-contained-${{ env.TAG_NAME }}.zip ./win-x64-self-contained/*

      # - name: "Upload: win-x64-self-contained"
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./${{ env.APP_NAME }}-win-x64-self-contained-${{ env.TAG_NAME }}.zip
      #     asset_name: ${{ env.APP_NAME }}-win-x64-self-contained-${{ env.TAG_NAME }}.zip
      #     asset_content_type: application/zip

      - name: "Publish: linux-x64"
        run: |
          dotnet restore --runtime linux-x64
          dotnet publish --nologo --configuration Release --runtime linux-x64 --framework netcoreapp3.1 --output ./publish/linux-x64/ --self-contained false
          zip -o -7 --junk-paths ./${{ env.APP_NAME }}-linux-x64-${{ env.TAG_NAME }}.zip ./publish/linux-x64/*

      - name: "Upload: linux-x64"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.APP_NAME }}-linux-x64-${{ env.TAG_NAME }}.zip
          asset_name: ${{ env.APP_NAME }}-linux-x64-${{ env.TAG_NAME }}.zip
          asset_content_type: application/zip

      - name: "Publish: linux-arm"
        run: |
          dotnet restore --runtime linux-arm
          dotnet publish --nologo --configuration Release --runtime linux-arm --framework netcoreapp3.1 --output ./publish/linux-arm/ --self-contained false
          zip -o -7 --junk-paths ./${{ env.APP_NAME }}-linux-arm-${{ env.TAG_NAME }}.zip ./publish/linux-arm/*

      - name: "Upload: linux-arm"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.APP_NAME }}-linux-arm-${{ env.TAG_NAME }}.zip
          asset_name: ${{ env.APP_NAME }}-linux-arm-${{ env.TAG_NAME }}.zip
          asset_content_type: application/zip

      - name: "Publish: osx-x64"
        run: |
          dotnet restore --runtime osx-x64
          dotnet publish --nologo --configuration Release --runtime osx-x64 --framework netcoreapp3.1 --output ./publish/osx-x64/ --self-contained false
          zip -o -7 --junk-paths ./${{ env.APP_NAME }}-osx-x64-${{ env.TAG_NAME }}.zip ./publish/osx-x64/*

      - name: "Upload: osx-x64"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.APP_NAME }}-osx-x64-${{ env.TAG_NAME }}.zip
          asset_name: ${{ env.APP_NAME }}-osx-x64-${{ env.TAG_NAME }}.zip
          asset_content_type: application/zip
