name: Unit- and functional tests

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-18.04

    strategy:
      matrix:
        env:
          - { php: 7.4, coverage: 1}
          - { php: 8.0, coverage: 0}

    env: ${{ matrix.env }}

    steps:
      - uses: actions/checkout@v1

      - name: Set up PHP Version
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.env.php }}
          tools: composer:v2

      - name: Start MySQL
        run: sudo /etc/init.d/mysql start

      # Directory permissions for .composer are wrong, so we remove the complete directory
      # https://github.com/actions/virtual-environments/issues/824
      - name: Delete .composer directory
        run: |
          sudo rm -rf ~/.composer

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.composer/cache
          key: dependencies-composer-${{ hashFiles('composer.json') }}

      - name: Install composer dependencies
        run: |
          composer install --no-progress

      - name: Unit tests
        run: |
          if [[ "$coverage" == "0" ]]; then
            echo "Running unit tests";
            .Build/bin/phpunit --colors -c Tests/Build/UnitTests.xml
          else
            echo "Running unit tests with coverage";
            .Build/bin/phpunit --colors --coverage-clover=unittest-coverage.clover -c Tests/Build/UnitTests.xml
          fi

      - name: Functional tests
        run: |
          export typo3DatabaseName="typo3";
          export typo3DatabaseHost="127.0.0.1";
          export typo3DatabaseUsername="root";
          export typo3DatabasePassword="root";
          if [[ "$coverage" == "0" ]]; then
            echo "Running functional tests";
          find 'Tests/Functional' -wholename '*Test.php' | parallel --gnu 'echo; echo "Running functional test suite {}"; .Build/bin/phpunit -c Tests/Build/FunctionalTests.xml {}'
          else
            echo "Running functional tests with coverage";
          find 'Tests/Functional' -wholename '*Test.php' | parallel --gnu 'echo; echo "Running functional test suite {}"; .Build/bin/phpunit --coverage-clover={}functionaltest-coverage.clover -c Tests/Build/FunctionalTests.xml {}'
          fi

      - name: Upload Code Coverage Data
        if: ${{ env.coverage == '1' && success() }}
        continue-on-error: true
        run: |
          echo;
          echo "Uploading code coverage results";
          wget https://scrutinizer-ci.com/ocular.phar
          php ocular.phar code-coverage:upload --format=php-clover unittest-coverage.clover
          find 'Tests/Functional' -wholename '*Test.php' -exec php ocular.phar code-coverage:upload --format=php-clover {}functionaltest-coverage.clover \;
