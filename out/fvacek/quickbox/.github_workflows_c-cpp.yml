
name: Build
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  QT_VERSION: '5.15.2'

jobs:
  build_linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'         
        
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{ runner.workspace }}/Qt
        key: ${{ runner.os }}-Qt-${{ env.QT_VERSION }}

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        
    - name: Get app version
      run: | 
        echo "VERSION=`grep APP_VERSION quickevent/app/quickevent/src/appversion.h | cut -d\\" -f2`" >> $GITHUB_ENV
          
    - name: Get AppImageTool
      run: |
        curl --silent "https://api.github.com/repos/AppImage/AppImageKit/releases/latest" | jq -r '.assets[] | select(.name == "appimagetool-x86_64.AppImage").browser_download_url' | sudo xargs curl -L -o /opt/appimagetool-x86_64.AppImage --create-dirs --url
        sudo chmod +x /opt/appimagetool-x86_64.AppImage
    
    - name: Build AppImage
      run: |
        mkdir ./build
        ./quickevent/make-dist.sh --src-dir . --qt-dir ${Qt5_DIR} --work-dir ./build --appimage-tool /opt/appimagetool-x86_64.AppImage 
        
    - name: Save AppImage
      uses: actions/upload-artifact@v2
      with:
        name: quickevent-${{ env.VERSION }}-linux64.Appimage
        path: build/artifacts/quickevent-*-linux64.AppImage
  
    - name: Save gzip
      uses: actions/upload-artifact@v2
      with:
        name: quickevent-${{ env.VERSION }}-linux64.tgz
        path: build/artifacts/quickevent-*-linux64.tgz
      
      
  build_windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
        
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
              
    - name: Cache Libs
      id: cache-libs
      uses: actions/cache@v2
      with:
        path: |
          C:/msys64/mingw64/bin/libcrypto-1_1-x64.dll
          C:/msys64/mingw64/bin/libssl-1_1-x64.dll
          C:/msys64/mingw64/bin/libiconv-2.dll
          C:/msys64/mingw64/bin/libintl-8.dll
          C:/msys64/mingw64/bin/libxml2-2.dll
          C:/msys64/mingw64/bin/liblzma-5.dll
          C:/msys64/mingw64/bin/zlib1.dll
          C:/msys64/mingw64/bin/libpq.dll
        key: ${{ runner.os }}-Libraries
      
    - name: Get OpenSSL and PostgreSQL libraries
      if: steps.cache-libs.outputs.cache-hit != 'true'
      run: |
        C:/msys64/usr/bin/pacman -Sy --noconfirm
        C:/msys64/usr/bin/pacman -S mingw-w64-x86_64-openssl mingw-w64-x86_64-postgresql --noconfirm
      shell: cmd      
        
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{ runner.workspace }}\Qt
        key: ${{ runner.os }}-Qt-${{ env.QT_VERSION }}
 
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        arch: 'win64_mingw81' 
    
    - name: Build
      run: |
        qmake.exe quickbox.pro -spec win32-g++ "CONFIG+=release" "GITHUB_ACTIONS=TRUE"
        mingw32-make.exe qmake_all
        mingw32-make.exe -j4
      shell: cmd
              
    - name: Get app version
      run: echo "VERSION=`grep APP_VERSION quickevent/app/quickevent/src/appversion.h | cut -d\\" -f2`" >> $GITHUB_ENV
  
    - name: Create installer
      run: |
        choco install innosetup --no-progress
        "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "/DVERSION=%VERSION%" "/DQT_DIR=%Qt5_Dir%" "/DPSQL_DIR=C:\msys64\mingw64" "/DSSL_DIR=C:\msys64\mingw64" quickevent/quickevent.iss 
      shell: cmd
    
    - name: Save setup
      uses: actions/upload-artifact@v2
      with:
        name: quickevent-${{ env.VERSION }}-win64-setup.exe
        path: _inno\quickevent\quickevent-${{ env.VERSION }}-win64-setup.exe
