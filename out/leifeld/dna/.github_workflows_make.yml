name: make

on:
  push:
    branches: [ master, testing ]
  pull_request:
    branches: [ master, testing ]

  workflow_dispatch:

jobs:

  dna:
    runs-on: ${{matrix.os}}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '14'

      - name: Make dna
        run: make dna

      - name: Test dna
        run: make test-dna

      - uses: actions/upload-artifact@v2
        with:
          name: DNA jar file (${{ matrix.os }})
          path: ${{ github.workspace }}/output/dna*.jar

  sample:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Install system dependencies
        run: sudo apt-get install sqlite3
        
      - name: Make sample
        run: make sample
        
      - name: Test sample
        run: make test-sample
        
      - uses: actions/upload-artifact@v2
        with:
          name: sample database
          path: output/sample.dna

  manual:
    runs-on: ubuntu-latest

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      
      - uses: r-lib/actions/setup-tinytex@master

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: 'release'
      
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '14'

      - name: Setup R Java support
        run: "echo export PATH=$PATH > reconf.sh; echo export JAVA_HOME=$JAVA_HOME >> reconf.sh; echo R CMD javareconf >> reconf.sh; sudo bash reconf.sh"

      - uses: r-lib/actions/setup-pandoc@v1
      
      - name: Query dependencies
        run: |
          if(! 'remotes' %in% installed.packages()) install.packages('remotes')
          saveRDS(remotes::dev_package_deps('rDNA', dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        run: sudo apt-get install libudunits2-dev libcurl4-openssl-dev ghostscript poppler-utils

      - name: Add TeX dependencies
        run: |
          if(! 'tinytex' %in% installed.packages()) install.packages('tinytex')
          tinytex::tlmgr_install("xcolor")
          tinytex::tlmgr_install("colortbl")
          tinytex::tlmgr_install("koma-script")
          tinytex::tlmgr_install("placeins")
          tinytex::tlmgr_install("ltablex")
          tinytex::tlmgr_install("soul")
          tinytex::tlmgr_install("multirow")
          tinytex::tlmgr_install("wrapfig")
          tinytex::tlmgr_install("float")
          tinytex::tlmgr_install("tabu")
          tinytex::tlmgr_install("varwidth")
          tinytex::tlmgr_install("threeparttable")
          tinytex::tlmgr_install("ulem")
          tinytex::tlmgr_install("adjustbox")
          tinytex::tlmgr_install("pgf")
          tinytex::tlmgr_install("tikz-3dplot")
          tinytex::tlmgr_install("bigfoot")
          tinytex::tlmgr_install("cm-super")
          tinytex::tlmgr_install("collectbox")
          tinytex::tlmgr_install("pdflscape")
        shell: Rscript {0}

      - name: Install dependencies
        run: remotes::install_deps('rDNA', dependencies = TRUE)
        shell: Rscript {0}

      - name: Make manual
        run: make manual

      - name: Test manual
        run: make test-manual
        
      - uses: actions/upload-artifact@v2
        with:
          name: DNA manual
          path: output/dna-manual.pdf

  rDNA:
    runs-on: ${{ matrix.config.os }}

    name: rDNA (${{ matrix.config.os }}, ${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04, r: 'devel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
      
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Check Java version
        run: java --version

      - name: Java reconf
        if: runner.os != 'Windows'
        run: sudo R CMD javareconf

      - name: Ensure that rJava works (non-macOS)
        if: runner.os != 'macOS'
        run: |
          if (! "rJava" %in% installed.packages()) tryCatch(install.packages("rJava"), error = function(e) message("rJava could not be installed from CRAN."))
          library("rJava")
          if (.jinit() != 0) stop("rJava does not work.")
        shell: Rscript {0}

      - name: Ensure that rJava works (macOS)
        if: runner.os == 'macOS'
        run: |
          install.packages("rJava", type = "source", repos = "http://cran.us.r-project.org")
          library("rJava")
          if (.jinit() != 0) stop("rJava does not work.")
        shell: Rscript {0}

      - uses: r-lib/actions/setup-pandoc@v1
      
      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps('rDNA', dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get install libudunits2-dev libcurl4-openssl-dev

      - name: Make rDNA
        run: make rDNA

      - name: Install dependencies
        run: |
          remotes::install_deps("rDNA", dependencies = TRUE)
          if (! "covr" %in% installed.packages()) tryCatch(remotes::install_github("r-lib/covr"), error = function(e) message("covr could not be installed from GitHub."))
          if (! "anomalize" %in% installed.packages()) tryCatch(remotes::install_github("business-science/anomalize"), error = function(e) message("anomalize could not be installed from GitHub."))
        shell: Rscript {0}

      - name: Check rDNA package (Windows)
        if: runner.os == 'Windows'
        working-directory: output
        run: "bash -c 'R CMD check --no-multiarch --no-manual --as-cran rDNA_*.tar.gz'"

      - name: Check rDNA package (Unix)
        if: runner.os == 'Linux'
        working-directory: output
        run: R CMD check --no-multiarch --no-manual --as-cran rDNA_*.tar.gz

      - name: Check rDNA package (macOS)
        if: runner.os == 'macOS'
        working-directory: output
        run: "bash -c 'NOAWT=1 R CMD check --no-manual --as-cran rDNA_*.tar.gz'"

      - name: Upload check results
        uses: actions/upload-artifact@v2
        with:
          name: rDNA check (${{ runner.os }}-r${{ matrix.config.r }})
          path: output/rDNA.Rcheck/

      - name: Test coverage
        working-directory: rDNA
        if: runner.os == 'macOS'
        run: |
          if (! "covr" %in% installed.packages()) tryCatch(remotes::install_cran("covr"), error = function(e) message("covr could not be installed from CRAN."))
          if (! "withr" %in% installed.packages()) tryCatch(install.packages("withr"), error = function(e) message("withr could not be installed."))
          withr::with_envvar(c("NOT_CRAN" = "true"), covr::codecov(quiet = FALSE))
        shell: Rscript {0}
