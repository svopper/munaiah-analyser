name: Build OSGeo4A

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  release:
    types:
      - published

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armeabi-v7a, arm64-v8a, x86, x86_64]
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Extract Qt Version
        id: qt_version
        run: |
          QT_VERSION=$(cat qt_version.txt)
          echo "::set-output name=version::${QT_VERSION}"

      - name: Build qt base docker
        uses: whoan/docker-build-with-cache-action@v5.10.0
        with:
          username: opengisch
          password: "${{ secrets.GITHUB_TOKEN }}"
          registry: docker.pkg.github.com
          image_name: qt-ndk
          context: .docker/qt-ndk
          image_tag: ${{ steps.qt_version.outputs.version }}
          build_extra_args: "--build-arg QT_VERSION=${{ steps.qt_version.outputs.version }}"

      - name: Build
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          docker tag docker.pkg.github.com/opengisch/osgeo4a/qt-ndk:${{ steps.qt_version.outputs.version }} qt-ndk
          docker build --build-arg ARCHES="${ARCH}" -t opengisch/qfield-sdk:latest .
      - name: Create target specific SDK
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          mkdir /tmp/osgeo4a
          docker run --rm --entrypoint tar opengisch/qfield-sdk:latest czC /home/osgeo4a . > /tmp/osgeo4a-${{ matrix.arch }}.tar.gz
      - uses: actions/upload-artifact@master
        if: ${{ github.event_name != 'pull_request' }}
        with:
          name: sdk-${{ matrix.arch }}
          path: /tmp/osgeo4a-${{ matrix.arch }}.tar.gz

  deploy:
    if: ${{ github.event_name != 'pull_request' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Extract branch or tag name
        id: extract_ref
        run: echo ::set-output name=ref::${GITHUB_REF#refs/*/}

      - uses: actions/download-artifact@master
        with:
          name: sdk-armeabi-v7a
          path: /tmp/workspace
      - uses: actions/download-artifact@master
        with:
          name: sdk-arm64-v8a
          path: /tmp/workspace
      - uses: actions/download-artifact@master
        with:
          name: sdk-x86
          path: /tmp/workspace
      - uses: actions/download-artifact@master
        with:
          name: sdk-x86_64
          path: /tmp/workspace

      - name: Recreate qt base image
        run: |
          docker build --build-arg QT_VERSION=$(cat qt_version.txt) -t qt-ndk .docker/qt-ndk
      - name: Recreate docker image
        run: |
          cp .docker/assemble/Dockerfile /tmp/workspace
          docker build -t opengisch/qfield-sdk:latest /tmp/workspace

      - name: Deploy to dockerhub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          docker push opengisch/qfield-sdk:latest
          docker tag opengisch/qfield-sdk:latest opengisch/qfield-sdk:${{ steps.extract_ref.outputs.ref }}
          docker push opengisch/qfield-sdk:${{ steps.extract_ref.outputs.ref }}

      - name: Free additional space
        run: |
          df -h
          rm -rf /tmp/workspace
          rm -rf /usr/share/dotnet/sdk
          sudo apt remove llvm-* ghc-* google-chrome-* dotnet-sdk-*
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          du -a /usr/share | sort -n -r | head -n 10
          du -a /usr/local/share | sort -n -r | head -n 10
          df -h
          sudo apt clean
          df -h

      - name: Create release sdk package
        run: |
          docker run --rm --entrypoint tar opengisch/qfield-sdk:latest czC /opt/ . > buildchain.tar.gz
          docker run --rm --entrypoint tar opengisch/qfield-sdk:latest czC /home/ . > qfield-sdk.tar.gz

      - name: Deploy buildchain to github release
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}

        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: buildchain.tar.gz
          asset_name: buildchain-${{ steps.extract_ref.outputs.ref }}.tar.gz
          asset_content_type: application/gzip

      - name: Deploy qfield-sdk to github release
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}

        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: qfield-sdk.tar.gz
          asset_name: qfield-sdk-${{ steps.extract_ref.outputs.ref }}.tar.gz
          asset_content_type: application/gzip
