# Making changes? https://github.com/nektos/act may help you test locally

name: Build, Test, and Deploy

on:
  push:
    branches: "**"
    tags-ignore: ["**"]
  pull_request:
  release:
    types: [released]

env:
  PROJECT_NAME: spongeapi

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: "${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}"

    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest]
    steps:
      # Setup
      - name: Check out
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.SPONGE_JD_DEPLOY_KEY }}
      - name: Setup JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 11
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      # Actually build
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: "${{ runner.os }}-spongeapi-${{ hashFiles('**/*.gradle*') }}"
          restore-keys: |
            ${{ runner.os }}-spongeapi-
      - name: Setup env variables
        run: |
          echo "GIT_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "BUILD_NUMBER=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: Build with Gradle
        run: ./gradlew build
      - name: Archive test results
        if: "${{ always() }}"
        uses: actions/upload-artifact@v2
        with:
          name: "test-results-${{ matrix.os }}"
          path: |
            build/reports/
            */build/reports/

      # Then publish if we are all set up to do so
      - name: Determine status
        if: "${{ runner.os == 'Linux' }}"
        run: |
          VERSION=$(./gradlew :properties | awk '/^version:/ { print $2; }')
          if [ "$(echo $VERSION | grep '\-SNAPSHOT')" ]; then
            echo "STATUS=snapshot" >> $GITHUB_ENV
          else
            echo "STATUS=release" >> $GITHUB_ENV
          fi
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
      - name: Publish with Gradle
        if: "${{ runner.os == 'Linux' && ((env.STATUS != 'release' && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/api-')) || (env.STATUS == 'release' && github.event_name == 'release')) }}"
        run: ./gradlew -PforceSign=true publish
        env:
          ORG_GRADLE_PROJECT_githubPackagesUsername: "${{ github.actor }}"
          ORG_GRADLE_PROJECT_githubPackagesPassword: "${{ secrets.GITHUB_TOKEN }}"
          ORG_GRADLE_PROJECT_spongeSnapshotRepo: "${{ secrets.SPONGE_MAVEN_SNAPSHOT_REPO_URL }}"
          ORG_GRADLE_PROJECT_spongeReleaseRepo: "${{ secrets.SPONGE_MAVEN_RELEASE_REPO_URL }}"
          ORG_GRADLE_PROJECT_spongeUsername: "${{ secrets.SPONGE_MAVEN_REPO_USER }}"
          ORG_GRADLE_PROJECT_spongePassword: "${{ secrets.SPONGE_MAVEN_REPO_PASSWORD }}"
          ORG_GRADLE_PROJECT_sonatypeUsername: "${{ secrets.SPONGE_MAVEN_OSSRH_USER }}"
          ORG_GRADLE_PROJECT_sonatypePassword: "${{ secrets.SPONGE_MAVEN_OSSRH_PASSWORD }}"
          ORG_GRADLE_PROJECT_spongeSigningKey: "${{ secrets.SPONGE_SIGNING_KEY }}"
          ORG_GRADLE_PROJECT_spongeSigningPassword: "${{ secrets.SPONGE_SIGNING_PASSWORD }}"
      - name: Publish Javadoc
        if: "${{ runner.os == 'Linux' && ((env.STATUS != 'release' && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/api-')) || (env.STATUS == 'release' && github.event_name == 'release')) }}"
        run: |
          git clone git@github.com:SpongePowered/APIJavadocs.git publish-jd -b data -c core.sshCommand="$(git config --local --get core.sshCommand)" -c user.name=Spongie -c user.email="staff@spongepowered.org"
          cd publish-jd
          DESTDIR="$PROJECT_NAME/$PROJECT_VERSION"
          rm -rf $DESTDIR
          mkdir -p $DESTDIR
          cp -R ../build/docs/javadoc/* $DESTDIR
          git add .
          git commit -m "Publishing javadoc for $PROJECT_NAME $PROJECT_VERSION"
          git push origin
          cd ..
          rm -rf publish-jd
