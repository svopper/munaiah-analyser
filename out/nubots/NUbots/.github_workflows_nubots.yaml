# Continuous Integration tests
name: NUbots CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  # Triggers on PRs to any branch
  pull_request:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build the docker image
  build_docker:
    name: "Build docker image"

    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # We output the image tag that we create so the other jobs can use it
    outputs:
      image: ${{ steps.image_output.outputs.image }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Cancels previously running jobs for this workflow
      - name: Cancel Workflow Action
        uses: styfle/cancel-workflow-action@0.9.1

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v2

      # Setup docker buildx
      - name: üê≥ Set up docker buildx üê≥
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Build the docker image
      - name: üê≥ Build the docker image üê≥
        uses: docker/build-push-action@v2.7.0
        with:
          pull: true
          tags: "nubots/nubots:pull-request-${{ github.event.number }}"
          file: docker/Dockerfile
          context: docker
          build-args: |
            platform=generic
            BUILDKIT_INLINE_CACHE=1
          push: true
          cache-from: |
            type=registry,ref=nubots/nubots:pull-request-${{ github.event.number }}
            type=registry,ref=nubots/nubots:generic
            type=inline

      - id: image_output
        name: Output the created image
        run: echo "::set-output name=image::nubots/nubots:pull-request-${{ github.event.number }}"

  # Build the codebase
  build_nubots:
    name: "Build and test NUbots"

    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    needs: build_docker

    # Run on the container we just built
    container:
      image: "${{ needs.build_docker.outputs.image }}"
      options: --user 0:0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Cancels previously running jobs for this workflow
      - name: Cancel Workflow Action
        uses: styfle/cancel-workflow-action@0.9.1

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Prepare Build Directory
        run: mkdir -p ../build

      - name: Configure the code
        run: ./b configure -- -DBUILD_TESTS=ON -DCI_BUILD=ON

      - name: Build the code
        run: ./b build

      - name: Test the code
        run: ./b tests run

  # Check the code is formatted according to clang-format
  clang-format:
    name: "C++/Protobuf Formatting"
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    needs: build_docker

    # Run on the container we just built
    container:
      image: "${{ needs.build_docker.outputs.image }}"
      options: --user 0:0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Cancels previously running jobs for this workflow
      - name: Cancel Workflow Action
        uses: styfle/cancel-workflow-action@0.9.1

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Check clang-format
        run: .github/workflows/scripts/validate_clang_format.sh

  # Validate the formatting is correct according to cmake-format
  cmake-format:
    name: "CMake Formatting"
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    needs: build_docker

    # Run on the container we just built
    container:
      image: "${{ needs.build_docker.outputs.image }}"
      options: --user 0:0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Cancels previously running jobs for this workflow
      - name: Cancel Workflow Action
        uses: styfle/cancel-workflow-action@0.9.1

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Check cmake-format
        run: .github/workflows/scripts/validate_cmake_format.sh

  # Validate the formatting is correct according to isort and black
  python-format:
    name: "Python Formatting"
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    needs: build_docker

    # Run on the container we just built
    container:
      image: "${{ needs.build_docker.outputs.image }}"
      options: --user 0:0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Cancels previously running jobs for this workflow
      - name: Cancel Workflow Action
        uses: styfle/cancel-workflow-action@0.9.1

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Check isort and black
        run: .github/workflows/scripts/validate_python_format.sh
