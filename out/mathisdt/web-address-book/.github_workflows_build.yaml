name: Release

on:
  push:
    branches:
      - "**"

jobs:
  release:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Display branch name
        run: |
          echo "current branch: $GITHUB_REF"
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
          check-latest: true
      - name: Set up Maven cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run Maven
        run: TZ=Europe/Berlin MAVEN_OPTS=-Xmx2g xvfb-run mvn -U clean verify
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: target/*.jar
      - name: Collect release metadata
        if: github.ref == 'refs/heads/master'
        id: collect_release_metadata
        run: |
          echo "release_timestamp=$(date '+%Y-%m-%d @ %H:%M')" >> $GITHUB_ENV
          echo "release_timestamp_terse=$(date '+%Y-%m-%d-%H-%M')" >> $GITHUB_ENV
          echo "release_hash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "release_file=$(ls target/web-address-book-*.jar | grep -v sources.jar)" >> $GITHUB_ENV
          echo "release_file_short=$(ls target/web-address-book-*.jar | grep -v sources.jar | sed -e 's#^.*/##g')" >> $GITHUB_ENV
      - name: Create release
        if: github.ref == 'refs/heads/master'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ env.release_timestamp_terse }}-${{ env.release_hash }}
          release_name: Release ${{ env.release_timestamp }}
          body: built from commit ${{ env.release_hash }}
      - name: Upload release artifact
        if: github.ref == 'refs/heads/master'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.release_file }}
          asset_name: ${{ env.release_file_short }}
          asset_content_type: application/java-archive
