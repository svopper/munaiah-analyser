name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout LightningQueues
      uses: actions/checkout@v2
    - name: Checkout lmdb
      uses: actions/checkout@v2
      with:
        repository: LMDB/lmdb
        ref: mdb.master
        path: lmdb
      if: matrix.os == 'ubuntu-latest'
    - name: Build lmdb native lib
      working-directory: ${{ runner.workspace}}/LightningQueues/lmdb/libraries/liblmdb/
      run: make
      if: matrix.os == 'ubuntu-latest'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Clean build
      working-directory: ${{ runner.workspace }}/LightningQueues
      run: dotnet clean && dotnet nuget locals all --clear
    - name: Install dependencies
      working-directory: ${{ runner.workspace }}/LightningQueues
      run: dotnet restore
    - name: Build
      working-directory: ${{ runner.workspace }}/LightningQueues
      run: dotnet build --configuration Release --no-restore
    - name: Test (Linux)
      working-directory: ${{ runner.workspace }}/LightningQueues
      run: LD_LIBRARY_PATH=${{ runner.workspace}}/LightningQueues/lmdb/libraries/liblmdb/:$LD_LIBRARY_PATH dotnet test -f netcoreapp3.1 --no-restore --verbosity normal
      if: matrix.os == 'ubuntu-latest'
    - name: Test (Windows or Mac)
      working-directory: ${{ runner.workspace }}/LightningQueues
      run: dotnet test -f netcoreapp3.1 --no-restore --verbosity normal
      if: matrix.os == 'windows-latest' || matrix.os == 'macos-latest' 
