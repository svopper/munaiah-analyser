name: build-and-test
on: [push, pull_request]

jobs:
    build:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                cc: [gcc, clang]
                coverage: [false, true]
        continue-on-error: ${{ matrix.coverage }}
        steps:
            - name: Install dependencies
              run: sudo apt-get install -y --no-install-recommends ${{ matrix.cc }} bison autoconf autogen libgcrypt20-dev libgnutls28-dev libsqlite3-dev libpq-dev libmysqlclient-dev python3-dev libjson-c-dev libxml2-dev zlib1g-dev ${{ (matrix.cc == 'gcc' && matrix.coverage) && 'lcov' || ''}} ${{ (matrix.cc == 'clang' && matrix.coverage) && 'llvm' || ''}}
            - name: Checkout sources
              uses: actions/checkout@v2
            - name: Generate build files
              working-directory: src
              run: ./autogen.sh
            - name: Configure build
              working-directory: src
              shell: sh
              run: ./configure --enable-use-ipv6 --enable-use-mccp --enable-use-json --enable-use-pcre
                               --enable-use-mysql --enable-use-pgsql --enable-use-sqlite
                               --enable-use-xml --enable-use-tls  --enable-use-gcrypt --enable-use-python
                               --enable-malloc-trace --enable-malloc-lpc-trace  --enable-dynamic-costs
                               --enable-eval-cost-trace --enable-trace-code --enable-swap-efun
                               ${{ matrix.coverage && '--with-optimize=no' || ''}}
                               EXTRA_CFLAGS="-DINSIDE_TRAVIS -Werror ${{ matrix.cc == 'gcc' && '-Wno-unused-result' || '' }} ${{ matrix.cc == 'gcc' && !matrix.coverage && '-D_FORTIFY_SOURCE=2' || '' }}"
                               CC=${{ matrix.cc }}
            - name: Build driver
              working-directory: src
              run: make ${{ matrix.cc == 'gcc' && matrix.coverage && 'PROFIL="--coverage"' || ''}} ${{ matrix.cc == 'clang' && matrix.coverage && 'PROFIL="-fprofile-instr-generate -fcoverage-mapping "' || ''}}
            - name: Run tests
              working-directory: test
              shell: sh
              run: ./run.sh
            - name: Generate coverage reports (gcc)
              if: matrix.cc == 'gcc' && matrix.coverage
              shell: bash
              working-directory: test
              run: |
                for dir in coverage/t-*; do ln ../src/*.gcno "$dir"; done
                lcov --capture --directory coverage --base-directory ../src --no-external --output coverage.info
                genhtml coverage.info --output-directory html
            - name: Generate coverage reports (clang)
              if: matrix.cc == 'clang' && matrix.coverage
              shell: bash
              working-directory: test
              run: |
                llvm-profdata merge -sparse coverage/*.profraw -o coverage.profdata
                llvm-cov show ../src/ldmud -instr-profile=coverage.profdata -format=html -output-dir=html
            - name: Upload coverage report
              if: matrix.coverage
              uses: actions/upload-artifact@v2
              with:
                name: coverage ${{ matrix.cc }}
                path: test/html
