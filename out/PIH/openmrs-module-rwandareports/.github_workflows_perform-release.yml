# Performing a release is done by executing a perform-release event through a repository webhook.
# This needs to be executed by issuing an authenticated REST Post operation, to prevent accidental or unauthorized releases.
# This should involve a command such as the following:
#
#    export GITHUB_TOKEN=your-personal-access-token
#    curl  -H "Authorization: token $GITHUB_TOKEN" \
#      -H "Accept: application/vnd.github.everest-preview+json"  \
#      -H "Content-Type: application/json" \
#      --request POST \
#      --data '{ "event_type": "perform-release", "client_payload": { "ref": "master" } }' \
#      https://api.github.com/repos/PIH/openmrs-module-rwandareports/dispatches
#
# This will kick off this workflow, which will attempt to update the pom by removing SNAPSHOT, commit these changes,
# build, test, and deploy this to the non-SNAPSHOT Maven repository, update the pom to next SNAPSHOT and commit.
#
# If you wish to release a new version off of a maintenance branch, you can change the ref to reflect the branch to use

name: Perform Release

on:
  repository_dispatch:
      types: ['perform-release']

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

      # Check out the code
    - uses: actions/checkout@v2
      with:
        ref: '${{ github.event.client_payload.ref }}'

      # Set up git config
    - name: Setup Git Config
      run: |
        git config user.email "github-action@users.noreply.github.com"
        git config user.name "Github Action"
        git config user.password "$GITHUB_TOKEN"

      # Enable caching of Maven dependencies to speed up job execution.  See https://github.com/actions/cache
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

      # Set up Java 1.8 with Maven including a server.xml file for authenticating to the non-SNAPSHOT repository
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        server-id: openmrs-repo-modules-pih
        server-username: BINTRAY_USERNAME
        server-password: BINTRAY_PASSWORD

      # Prepare the release.  This updates and commits pom to release version, tags, updates to next development version
    - name: Prepare Release
      run: mvn -B release:prepare

      # Perform the release.  This checks out the tag from the previous step, builds, and deploys to Maven repository
    - name: Perform Release
      run: mvn -B release:perform
      env:
        BINTRAY_USERNAME: pih
        BINTRAY_PASSWORD: ${{ secrets.BINTRAY_PASSWORD }}

      # Run setup-java again to replace the settings.xml with with the SNAPSHOT repository
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        server-id: openmrs-repo-modules-pih-snapshots
        server-username: BINTRAY_USERNAME
        server-password: BINTRAY_PASSWORD

      # Now run a final deploy to ensure the next SNAPSHOT is also built and deployed to Maven
    - name: Maven Deploy
      run: mvn -B -e clean deploy --file pom.xml
      env:
        BINTRAY_USERNAME: pih
        BINTRAY_PASSWORD: ${{ secrets.BINTRAY_PASSWORD }}
