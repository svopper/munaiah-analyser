name: apple
on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request: {}
  workflow_dispatch:

jobs:
  build:

    strategy:
      fail-fast: true
      matrix:
        #If Xcode includes LLVM 12 we can re-enable it, LLVM 12 has some new bitcode
        #code updated which is not compatible with LLVM 11 from Xcode 12.x
        #platform: [iPhoneOS, iPhoneSimulator, AppleTVOS, AppleTVSimulator, MacOSX]
        platform: [iPhoneSimulator, AppleTVSimulator, MacOSX]
        arch: [arm64, x86_64]
        #exclude:
        #  - platform: iPhoneOS
        #    arch: x86_64
        #  - platform: AppleTVOS
        #    arch: x86_64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: true
      - name: Restore timestamps
        run: |
          cd src
          for dir in *
          do
            cd $dir
            timestamp=$(git log --date=local --pretty=format:"%cd" --date=format:'%Y%m%d%H%M.%S' . | head -1)
            # Ignore errors from MoltenVK submodules
            find . -exec touch -t $timestamp {} + || true
            cd ..
          done
      - id: sysroot
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ matrix.platform }}
      - name: Configure shared build for MacOSX
        if: ${{ matrix.platform == 'MacOSX' }}
        run: |
          echo "shared=ON" >> $GITHUB_ENV
          echo "static=OFF" >> $GITHUB_ENV
      - name: Configure static build for non-MacOSX
        if: ${{ matrix.platform != 'MacOSX' }}
        run: |
          echo "shared=OFF" >> $GITHUB_ENV
          echo "static=ON" >> $GITHUB_ENV
      - name: Download cctools
        run: |
          cd /opt
          wget https://github.com/supertuxkart/dependencies/releases/download/preview/cctools.tar.xz
          tar xf cctools.tar.xz
      - name: Build zlib
        run: |
          cd src/zlib
          # zlib cmake will change the public header, install it first
          mkdir -p $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/include
          mkdir -p $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib
          cp -p zconf.h zlib.h $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/include
          mkdir build
          cd build
          cmake .. -DCCTOOLS_PREFIX=/opt/cctools -DCCTOOLS_PLATFORM=${{ matrix.platform }} -DCCTOOLS_ARCH=${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=../../../cmake/Toolchain-cctools.cmake \
          -DCMAKE_INSTALL_PREFIX=$HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}
          ../../../build_tools/fix_rpath.py $(pwd)
          make -j5
          if [ ${{ matrix.platform }} = "MacOSX" ]; then
            cp -a libz*dylib $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib
          else
            cp -a libz.a $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib
          fi
      - name: Build Mbed TLS
        run: |
          cd src/mbedtls
          mkdir build
          cd build
          cmake .. -DCCTOOLS_PREFIX=/opt/cctools -DCCTOOLS_PLATFORM=${{ matrix.platform }} -DCCTOOLS_ARCH=${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=../../../cmake/Toolchain-cctools.cmake \
          -DCMAKE_INSTALL_PREFIX=$HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }} \
          -DENABLE_PROGRAMS=OFF -DENABLE_TESTING=OFF \
          -DUSE_SHARED_MBEDTLS_LIBRARY=${{ env.shared }} -DUSE_STATIC_MBEDTLS_LIBRARY=${{ env.static }}
          ../../../build_tools/fix_rpath.py $(pwd)/library
          make -j5
          make install
          if [ ${{ matrix.platform }} = "MacOSX" ]; then
            # New CMake no longer specify @rpath when install, copy manually
            cp -a library/libmbed*.dylib $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib
            # Fix dylib permission
            chmod 755 $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib/libmbed*dylib || true
          fi
      - name: Build cURL
        run: |
          # Disable bundled zlib
          cd src/curl
          mkdir build
          cd build
          # Fix old Mac without HAVE_CLOCK_GETTIME_MONOTONIC
          if [ ${{ matrix.platform }} = "MacOSX" ] && [ ${{ matrix.arch }} = "x86_64" ]; then
            wget https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX10.9.sdk.tar.xz
            tar xf MacOSX10.9.sdk.tar.xz
            extra_flags="-isysroot $(pwd)/MacOSX10.9.sdk"
          fi
          # -DCURL_CA_BUNDLE=none -DCURL_CA_PATH=none because STK includes its own
          cmake .. -DCCTOOLS_PREFIX=/opt/cctools -DCCTOOLS_PLATFORM=${{ matrix.platform }} -DCCTOOLS_ARCH=${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=../../../cmake/Toolchain-cctools.cmake \
          -DCMAKE_INSTALL_PREFIX=$HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }} \
          -DBUILD_TESTING=OFF -DBUILD_CURL_EXE=OFF  -DBUILD_SHARED_LIBS=${{ env.shared }} \
          -DCMAKE_USE_MBEDTLS=ON -DUSE_ZLIB=ON \
          -DCMAKE_USE_OPENSSL=OFF -DCMAKE_USE_LIBSSH=OFF -DCMAKE_USE_LIBSSH2=OFF \
          -DCMAKE_USE_GSSAPI=OFF -DUSE_NGHTTP2=OFF -DUSE_QUICHE=OFF \
          -DHTTP_ONLY=ON -DCURL_CA_BUNDLE=none -DCURL_CA_PATH=none \
          -DCMAKE_C_FLAGS="$extra_flags" -DCMAKE_CXX_FLAGS="$extra_flags"
          ../../../build_tools/fix_rpath.py $(pwd)/lib
          make -j5
          make install
          if [ ${{ matrix.platform }} = "MacOSX" ]; then
            cp -a lib/libcurl.dylib $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib
          fi
          rm -rf $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/bin
          rm -rf $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib/cmake
          rm -rf $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib/pkgconfig
      - name: Build libpng
        run: |
          cd src/libpng
          mkdir build
          cd build
          # -DPNG_ARM_NEON=off is required for successful compilation of aarch64
          cmake .. -DCCTOOLS_PREFIX=/opt/cctools -DCCTOOLS_PLATFORM=${{ matrix.platform }} -DCCTOOLS_ARCH=${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=../../../cmake/Toolchain-cctools.cmake \
          -DCMAKE_INSTALL_PREFIX=$HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }} \
          -DPNG_SHARED=${{ env.shared }} -DPNG_STATIC=${{ env.static }} -DPNG_TESTS=OFF -DPNG_ARM_NEON=off
          ../../../build_tools/fix_rpath.py $(pwd)
          make -j5
          make install
          if [ ${{ matrix.platform }} = "MacOSX" ]; then
            cp -a libpng*.dylib $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib
          fi
          rm -rf $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/bin
          rm -rf $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib/pkgconfig
          rm -rf $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib/libpng
          rm -f $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib/libpng.a
          touch -r ../README $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/include/png*
          touch -r ../README $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/include/libpng16/*
      - name: Build FreeType bootstrap
        run: |
          cd src/freetype
          mkdir build
          cd build
          cmake .. -DCCTOOLS_PREFIX=/opt/cctools -DCCTOOLS_PLATFORM=${{ matrix.platform }} -DCCTOOLS_ARCH=${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=../../../cmake/Toolchain-cctools.cmake \
          -DCMAKE_INSTALL_PREFIX=$HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }} \
          -DFT_WITH_ZLIB=ON -DFT_WITH_BZIP2=OFF -DFT_WITH_BROTLI=OFF \
          -DFT_WITH_PNG=ON -DFT_WITH_HARFBUZZ=OFF -DBUILD_SHARED_LIBS=${{ env.shared }} \
          -DCMAKE_DISABLE_FIND_PACKAGE_BZip2=TRUE
          ../../../build_tools/fix_rpath.py $(pwd)
          make -j5
          make install
          if [ ${{ matrix.platform }} = "MacOSX" ]; then
            cp -a libfreetype.*dylib $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib
          fi
          rm -rf $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib/cmake
          rm -rf $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib/pkgconfig
          touch -r ../README $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/include/freetype2/freetype/config/*
      - name: Build HarfBuzz
        run: |
          cd src/harfbuzz
          mkdir build
          cd build
          cmake .. -DCCTOOLS_PREFIX=/opt/cctools -DCCTOOLS_PLATFORM=${{ matrix.platform }} -DCCTOOLS_ARCH=${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=../../../cmake/Toolchain-cctools.cmake \
          -DCMAKE_INSTALL_PREFIX=$HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }} \
          -DHB_HAVE_CORETEXT=OFF -DHB_HAVE_FREETYPE=ON -DBUILD_SHARED_LIBS=${{ env.shared }} \
          -DHB_BUILD_SUBSET=OFF
          ../../../build_tools/fix_rpath.py $(pwd)
          make -j5
          make install
          if [ ${{ matrix.platform }} = "MacOSX" ]; then
            cp -a libharfbuzz*.dylib $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib
          fi
          rm -rf $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib/cmake
      - name: Build FreeType
        run: |
          cd src/freetype
          git reset --hard
          rm -rf build
          mkdir build
          cd build
          cmake .. -DCCTOOLS_PREFIX=/opt/cctools -DCCTOOLS_PLATFORM=${{ matrix.platform }} -DCCTOOLS_ARCH=${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=../../../cmake/Toolchain-cctools.cmake \
          -DCMAKE_INSTALL_PREFIX=$HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }} \
          -DFT_WITH_ZLIB=ON -DFT_WITH_BZIP2=OFF -DFT_WITH_BROTLI=OFF \
          -DFT_WITH_PNG=ON -DFT_WITH_HARFBUZZ=ON -DBUILD_SHARED_LIBS=${{ env.shared }} \
          -DCMAKE_DISABLE_FIND_PACKAGE_BZip2=TRUE
          ../../../build_tools/fix_rpath.py $(pwd)
          make -j5
          # Don't make install again as the timestamp will be overwritten after git reset --hard
          cp -a libfreetype.*dylib $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib || true
          cp libfreetype.a $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib || true
      - name: Build Ogg
        run: |
          cd src/libogg
          mkdir build
          cd build
          cmake .. -DCCTOOLS_PREFIX=/opt/cctools -DCCTOOLS_PLATFORM=${{ matrix.platform }} -DCCTOOLS_ARCH=${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=../../../cmake/Toolchain-cctools.cmake \
          -DCMAKE_INSTALL_PREFIX=$HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }} \
          -DBUILD_SHARED_LIBS=${{ env.shared }} -DBUILD_TESTING=OFF -DINSTALL_DOCS=OFF \
          -DINSTALL_PKG_CONFIG_MODULE=OFF -DINSTALL_CMAKE_PACKAGE_MODULE=OFF
          ../../../build_tools/fix_rpath.py $(pwd)
          make -j5
          make install
          if [ ${{ matrix.platform }} = "MacOSX" ]; then
            cp -a libogg*.dylib $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib
          fi
          touch -r ../README.md $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/include/ogg/*
      - name: Build Vorbis
        run: |
          cd src/libvorbis
          mkdir build
          cd build
          cmake .. -DCCTOOLS_PREFIX=/opt/cctools -DCCTOOLS_PLATFORM=${{ matrix.platform }} -DCCTOOLS_ARCH=${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=../../../cmake/Toolchain-cctools.cmake \
          -DCMAKE_INSTALL_PREFIX=$HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }} \
          -DBUILD_SHARED_LIBS=${{ env.shared }} -DINSTALL_CMAKE_PACKAGE_MODULE=OFF
          ../../../build_tools/fix_rpath.py $(pwd)/lib
          make -j5
          make install
          if [ ${{ matrix.platform }} = "MacOSX" ]; then
            cp -a lib/libvorbis*.dylib $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib
          fi
          rm -rf $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib/pkgconfig
      - name: Build libjpeg-turbo
        run: |
          # yasm doesn't support -fembed-bitcode
          # As jpeg is not performance crticial enough for STK so it's built with asm disabled for non-MacOSX
          if [ ${{ matrix.platform }} = "MacOSX" ]; then
            sudo apt install -y yasm
          fi
          cd src/libjpeg
          mkdir build
          cd build
          # libjpeg install library to lib64 folder, override it
          cmake .. -DCCTOOLS_PREFIX=/opt/cctools -DCCTOOLS_PLATFORM=${{ matrix.platform }} -DCCTOOLS_ARCH=${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=../../../cmake/Toolchain-cctools.cmake \
          -DCMAKE_INSTALL_PREFIX=$HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }} \
          -DENABLE_SHARED=${{ env.shared }} -DENABLE_STATIC=${{ env.static }} -DCMAKE_INSTALL_DEFAULT_LIBDIR=lib \
          -DCMAKE_SKIP_INSTALL_RPATH=ON
          make -j5
          make install
          touch -r ../jerror.h $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/include/jconfig.h
          rm -r $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/bin
      - name: Build libsamplerate
        run: |
          cd src/libsamplerate
          mkdir build
          cd build
          cmake .. -DCCTOOLS_PREFIX=/opt/cctools -DCCTOOLS_PLATFORM=${{ matrix.platform }} -DCCTOOLS_ARCH=${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=../../../cmake/Toolchain-cctools.cmake \
          -DCMAKE_INSTALL_PREFIX=$HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }} \
          -DLIBSAMPLERATE_EXAMPLES=OFF -DBUILD_TESTING=OFF -DBUILD_SHARED_LIBS=${{ env.shared }}
          ../../../build_tools/fix_rpath.py $(pwd)/src
          make -j5
          make install
          if [ ${{ matrix.platform }} = "MacOSX" ]; then
            cp -a src/libsamplerate*.dylib $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib
          fi
          rm -rf $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib/pkgconfig
          rm -rf $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/lib/cmake
      - name: Prepare upload
        run: |
          mv $HOME/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }} .
          rm -rf dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}/share
          mkdir build
          tar -cJf build/dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}.tar.xz dependencies-${{ steps.sysroot.outputs.lowercase }}-${{ matrix.arch }}
      - name: Copy SDL2 and MoltenVK
        if: ${{ matrix.platform == 'iPhoneSimulator' && matrix.arch == 'arm64' }}
        run: |
          tar -cJf build/sdl.tar.xz src/sdl2
          tar -cJf build/moltenvk.tar.xz src/moltenvk
      - name: Upload dependencies
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build/*
  packaging:
    name: Packaging dependencies
    needs: build
    runs-on: macos-latest
    steps:
      - name: Configure packaging name for git master branch
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          echo "release_name=preview" >> $GITHUB_ENV
      - name: Configure packaging name for tag
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "release_name=`basename $GITHUB_REF`" >> $GITHUB_ENV
      - name: Exit otherwise
        if: ${{ !(github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) ||
            github.repository_owner != 'supertuxkart' }}
        run: exit 1
      - name: Check for prerelease
        if: ${{ github.ref == 'refs/heads/master' || contains(github.ref, 'rc') || contains(github.ref, 'beta') }}
        run: |
          echo "release_pre=true" >> $GITHUB_ENV
      - name: Check for non-prerelease
        if: ${{ github.ref != 'refs/heads/master' && !contains(github.ref, 'rc') && !contains(github.ref, 'beta') }}
        run: |
          echo "release_pre=false" >> $GITHUB_ENV
      - name: Download dependencies
        uses: actions/download-artifact@v2
      - name: lipo -create libraries
        run: |
          #tar xf build/dependencies-iphoneos-arm64.tar.xz
          tar xf build/dependencies-iphonesimulator-x86_64.tar.xz
          tar xf build/dependencies-iphonesimulator-arm64.tar.xz
          #tar xf build/dependencies-appletvos-arm64.tar.xz
          tar xf build/dependencies-appletvsimulator-x86_64.tar.xz
          tar xf build/dependencies-appletvsimulator-arm64.tar.xz
          tar xf build/dependencies-macosx-x86_64.tar.xz
          tar xf build/dependencies-macosx-arm64.tar.xz
          mkdir -p dependencies-macosx/lib
          mv dependencies-macosx-x86_64/include dependencies-macosx
          cd dependencies-macosx/lib
          for f in ../../dependencies-macosx-x86_64/lib/*.dylib; do
            file=$(basename $f)
            if [ -L $f ]; then
                cp -a ../../dependencies-macosx-x86_64/lib/$file .
                continue
            fi
            lipo -create ../../dependencies-macosx-x86_64/lib/$file ../../dependencies-macosx-arm64/lib/$file -output $file
          done
          cd ../..
          for simulator in iphonesimulator appletvsimulator; do
            mkdir -p dependencies-$simulator/lib
            mv dependencies-$simulator-x86_64/include dependencies-$simulator
            cd dependencies-$simulator/lib
            for f in ../../dependencies-$simulator-x86_64/lib/*.a; do
              file=$(basename $f)
              lipo -create ../../dependencies-$simulator-x86_64/lib/$file ../../dependencies-$simulator-arm64/lib/$file -output $file
            done
            cd ../..
          done
          # Only single arch for iphoneos and appletvos
          #mv dependencies-iphoneos-arm64 dependencies-iphoneos
          #mv dependencies-appletvos-arm64 dependencies-appletvos
      - name: Build MoltenVK
        run: |
          tar xf build/moltenvk.tar.xz
          cd src/moltenvk
          ./fetchDependencies --macos --iossim --tvossim
          xcodebuild build -quiet -project MoltenVKPackaging.xcodeproj -scheme "MoltenVK Package (macOS only)" -configuration "Release"
          xcodebuild build -quiet -project MoltenVKPackaging.xcodeproj -scheme "MoltenVK Package (iOS only)" -destination "generic/platform=iOS Simulator" -configuration "Release" OTHER_CFLAGS="-fembed-bitcode" BITCODE_GENERATION_MODE="bitcode"
          xcodebuild build -quiet -project "MoltenVKPackaging.xcodeproj" -scheme "MoltenVK Package (tvOS only)" -destination "generic/platform=tvOS Simulator" -configuration "Release" OTHER_CFLAGS="-fembed-bitcode" BITCODE_GENERATION_MODE="bitcode"
          touch -r README.md Package/Release/MoltenVK/include/MoltenVK/*
          touch -r README.md Package/Release/MoltenVK/include/vk_video/*
          touch -r README.md Package/Release/MoltenVK/include/vulkan/*
          cp -rp Package/Release/MoltenVK/include/* ../../dependencies-macosx/include
          cp Package/Release/MoltenVK/dylib/macOS/libMoltenVK.dylib ../../dependencies-macosx/lib
          cp -rp Package/Release/MoltenVK/include/* ../../dependencies-iphonesimulator/include
          cp Package/Release/MoltenVK/MoltenVK.xcframework/ios-arm64_x86_64-simulator/libMoltenVK.a ../../dependencies-iphonesimulator/lib
          cp -rp Package/Release/MoltenVK/include/* ../../dependencies-appletvsimulator/include
          cp Package/Release/MoltenVK/MoltenVK.xcframework/tvos-arm64_x86_64-simulator/libMoltenVK.a ../../dependencies-appletvsimulator/lib
      - name: Build SDL2
        run: |
          tar xf build/sdl.tar.xz
          cd src/sdl2/Xcode/SDL
          xcodebuild -project SDL.xcodeproj -target "Shared Library" -configuration Release -sdk macosx CONFIGURATION_BUILD_DIR=./build-macosx
          cp -a build-macosx/libSDL2.dylib ../../../../dependencies-macosx/lib
          cp -rp ../../include ../../../../dependencies-macosx/include/SDL2
          #xcodebuild -project SDL.xcodeproj -target "Static Library-iOS" -configuration Release -sdk iphoneos CONFIGURATION_BUILD_DIR=./build-iphoneos
          #cp build-iphoneos/libSDL2.a ../../../../dependencies-iphoneos/lib
          #cp -rp ../../include ../../../../dependencies-iphoneos/include/SDL2
          xcodebuild -project SDL.xcodeproj -target "Static Library-iOS" -configuration Release -sdk iphonesimulator CONFIGURATION_BUILD_DIR=./build-iphonesimulator
          cp build-iphonesimulator/libSDL2.a ../../../../dependencies-iphonesimulator/lib
          cp -rp ../../include ../../../../dependencies-iphonesimulator/include/SDL2
          #xcodebuild -project SDL.xcodeproj -target "Static Library-tvOS" -configuration Release -sdk appletvos CONFIGURATION_BUILD_DIR=./build-appletvos
          #cp build-appletvos/libSDL2.a ../../../../dependencies-appletvos/lib
          #cp -rp ../../include ../../../../dependencies-appletvos/include/SDL2
          xcodebuild -project SDL.xcodeproj -target "Static Library-tvOS" -configuration Release -sdk appletvsimulator CONFIGURATION_BUILD_DIR=./build-appletvsimulator
          cp build-appletvsimulator/libSDL2.a ../../../../dependencies-appletvsimulator/lib
          cp -rp ../../include ../../../../dependencies-appletvsimulator/include/SDL2
      - name: Archive
        run: |
          tar -cJf dependencies-macosx.tar.xz dependencies-macosx
          #tar -cJf dependencies-iphoneos.tar.xz dependencies-iphoneos
          tar -cJf dependencies-iphonesimulator.tar.xz dependencies-iphonesimulator
          #tar -cJf dependencies-appletvos.tar.xz dependencies-appletvos
          tar -cJf dependencies-appletvsimulator.tar.xz dependencies-appletvsimulator
      - name: Upload Apple dependencies
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "dependencies*.xz"
          tag: ${{ env.release_name }}
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          allowUpdates: true
          prerelease: ${{ env.release_pre }}
