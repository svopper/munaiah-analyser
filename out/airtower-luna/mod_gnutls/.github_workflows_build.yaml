name: CI build
on:
  pull_request:
  push:
    # don't run on packaging branches
    branches-ignore:
      - 'for-debian'
      - 'debian/**'
      - 'pristine-tar'

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        container:
          - 'debian:buster'
          - 'debian:sid'
          - 'fedora:33'
          - 'alpine:latest'
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    name: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies (Debian)
        if: startsWith(matrix.container, 'debian')
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get -y install python3-yaml apache2-bin apache2-dev curl gnutls-bin libapr1-dev libgnutls28-dev openssl pandoc pkg-config procps iproute2 softhsm2
      - name: install dependencies (Fedora)
        if: startsWith(matrix.container, 'fedora')
        run: |
          dnf -y install bzip2 curl gcc gnutls-devel gnutls-utils httpd-devel iproute libtool make pkgconf-pkg-config python3-pyyaml redhat-rpm-config softhsm
      - name: install dependencies (Alpine)
        if: startsWith(matrix.container, 'alpine')
        run: |
          apk add apache2 apache2-dev apache2-proxy autoconf automake build-base gnutls-dev gnutls-utils libtool pkgconfig python3 py3-yaml
      - name: network overview
        run: |
          ip addr show
          cat /etc/hosts
      - name: find usable IPs for tests
        run: |
          echo "test_ips=$(python3 test/check_test_ips.py -H localhost)" >> ${GITHUB_ENV}
      - name: set prefix for container-specific artifacts
        # this is because upload-artifact doesn't like ":" in file names
        env:
          CONTAINER_NAME: ${{ matrix.container }}
        run: |
          echo "artifact_prefix=$(echo ${CONTAINER_NAME} | sed s/:/-/)" >> ${GITHUB_ENV}
      - name: autoreconf
        run: autoreconf -fiv
      - name: configure
        run: TEST_IP="${test_ips}" APACHE_MUTEX=pthread ./configure
      - name: store config.log
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ env.artifact_prefix }}-config-log
          path: config.log
      - name: make
        run: make -j4
      - name: make check
        run: VERBOSE=1 make -j4 check
      - name: store test logs
        uses: actions/upload-artifact@v2
        if: failure() || cancelled()
        with:
          name: ${{ env.artifact_prefix }}-test-logs
          path: |
            test/test-*.log
            test/logs/
      - name: make distcheck
        run: VERBOSE=1 make -j4 distcheck

  coverage:
    runs-on: ubuntu-latest
    container: debian:sid
    name: coverage
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get -y install python3-yaml apache2-bin apache2-dev curl gnutls-bin libapr1-dev libgnutls28-dev openssl pkg-config procps iproute2 softhsm2 clang llvm
      - name: network overview
        run: |
          ip addr show
          cat /etc/hosts
      - name: find usable IPs for tests
        run: |
          echo "test_ips=$(python3 test/check_test_ips.py -H localhost)" >> ${GITHUB_ENV}
      - name: autoreconf
        run: autoreconf -fiv
      - name: configure
        run: CC=clang TEST_IP="${test_ips}" APACHE_MUTEX=pthread ./configure --enable-clang-coverage
      - name: store config.log
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: coverage-config-log
          path: config.log
      - name: make
        run: make -j4
      - name: make check
        run: VERBOSE=1 make -j4 check
      - name: store test logs
        uses: actions/upload-artifact@v2
        if: failure() || cancelled()
        with:
          name: coverage-test-logs
          path: |
            test/test-*.log
            test/logs/
      - name: generate coverage report
        working-directory: ./test
        run: make -j4 coverage
      - name: store coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: test/coverage/
      - name: coverage summary
        run: llvm-cov report src/.libs/mod_gnutls.so -instr-profile=test/outputs/coverage.profdata src/*.c src/*.h include/*.h
