name: "datafeeder"
on:
  push:
    paths:
      - "commons/**"
      - "security-proxy-spring-integration/**"
      - "datafeeder/**"
  pull_request:
    paths:
      - "commons/**"
      - "security-proxy-spring-integration/**"
      - "datafeeder/**"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
    - name: "Checking out"
      uses: actions/checkout@v1

    - name: "Setting up Java"
      uses: actions/setup-java@v1
      with:
        java-version: '8.x'

    - name: "Configuring Maven"
      run: |
          mkdir -p $HOME/.m2
          # revisit? can't resolve org.openapitools:openapi-generator-maven-plugin:jar:5.0.1 in artifactory-georchestra
          #cp .github/resources/m2-settings.xml $HOME/.m2/settings.xml

    - name: "Maven repository caching"
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: "Installing & checking formatting"
      run: ./mvnw install -pl :datafeeder --also-make -P-all,datafeeder --no-transfer-progress -B -Dfmt.action=validate -Dadditionalparam=-Xdoclint:none -DskipTests
      # note "-pl :datafeeder --also-make" builds only the project and its dependencies

    - name: "Running Unit Tests"
      run: ./mvnw test -pl :datafeeder -P-all,datafeeder -ntp -Dfmt.skip=true -Dadditionalparam=-Xdoclint:none

      # pull images, fetches in parallel docker layers and speeds up the process
    - name: "Pull required docker images for integration testing"
      working-directory: datafeeder/
      run: docker-compose pull -q

    - name: "Build required docker images (ldap, database)"
      run: |
        docker build -t georchestra/ldap:latest ./ldap
        docker build -t georchestra/database:latest ./postgresql

    - name: "Build required docker image (geonetwork)"
      run: |
        git submodule update --init --recursive --depth 1 geonetwork/
        cd geonetwork && ../mvnw install -T1C -ntp -DskipTests
        cd web && ../../mvnw package docker:build -Pdocker -DdockerImageName=georchestra/geonetwork -DdockerImageTags=latest -ntp -DskipTests

    - name: "Build required docker image (console)"
      run: |
        ./mvnw -pl :console -am clean install docker:build -P-all,console,docker -DdockerImageName=georchestra/console:latest -DskipTests -ntp -Dskip.npm -Dfmt.skip

    - name: "Running Integration Tests"
      working-directory: datafeeder/
      run: ../mvnw verify -P-all,datafeeder -DskipITs=false -DskipTests -ntp -Dfmt.skip=true -Dadditionalparam=-Xdoclint:none

    - name: Getting image tag
      if: github.repository == 'georchestra/georchestra'
      id: version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - name: "Building docker image"
      if: github.repository == 'georchestra/georchestra'
      run: ./mvnw -f datafeeder/ clean package docker:build -Pdocker -DskipTests -DdockerImageName=georchestra/datafeeder:${{ steps.version.outputs.VERSION }}

    - name: "Logging in docker.io"
      if: github.repository == 'georchestra/georchestra'
      uses: azure/docker-login@v1
      with:
        username: '${{ secrets.DOCKER_HUB_USERNAME }}'
        password: '${{ secrets.DOCKER_HUB_PASSWORD }}'

    - name: "Pushing latest to docker.io"
      if: github.ref == 'refs/heads/master' && github.repository == 'georchestra/georchestra'
      run: |
        docker tag georchestra/datafeeder:${{ steps.version.outputs.VERSION }} georchestra/datafeeder:latest
        docker push georchestra/datafeeder:latest

    - name: "Pushing release branch to docker.io"
      if: contains(github.ref, 'refs/heads/21.') && github.repository == 'georchestra/georchestra'
      run: |
        docker push georchestra/datafeeder:${{ steps.version.outputs.VERSION }}

    - name: "Pushing release tag to docker.io"
      if: contains(github.ref, 'refs/tags/21.') && github.repository == 'georchestra/georchestra'
      run: |
        docker push georchestra/datafeeder:${{ steps.version.outputs.VERSION }}

    - name: "Remove SNAPSHOT jars from repository"
      run: |
        find .m2/repository -name "*SNAPSHOT*" -type d | xargs rm -rf {}
