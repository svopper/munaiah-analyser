name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v2
    
    - name: Unzip libsvg
      working-directory: ${{github.workspace}}/deps
      run: tar -xvf ${{github.workspace}}/deps/libsvg-0.1.4.tar.gz
    
    # Mac is very particular
    # https://stackoverflow.com/questions/11287564/getting-sed-error-illegal-byte-sequence-in-bash
    - if: matrix.os == 'macOS-latest'
      name: Patch libsvg (quick 'n dirty); FreeBSD
      working-directory: ${{github.workspace}}/deps/libsvg-0.1.4/src
      run: LC_ALL=C sed -i '' 's/png_set_gray_1_2_4_to_8/png_set_expand_gray_1_2_4_to_8/' svg_image.c
      
    - if: matrix.os != 'macOS-latest'
      name: Patch libsvg (quick 'n dirty); UNIXy
      working-directory: ${{github.workspace}}/deps/libsvg-0.1.4/src
      run: sed -i 's/png_set_gray_1_2_4_to_8/png_set_expand_gray_1_2_4_to_8/' svg_image.c
      
    - name: Build & install libsvg
      working-directory: ${{github.workspace}}/deps/libsvg-0.1.4 
      run: ./configure && make && sudo make install

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
      
    - name: Archive build results
      uses: actions/upload-artifact@v2
      with:
        name: build-output
        path: ${{github.workspace}}/build
