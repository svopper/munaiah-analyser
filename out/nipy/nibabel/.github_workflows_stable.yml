name: Stable tests

# This file tests the claimed support range of NiBabel including
#
# * Operating systems: Linux, Windows (x64 & x86), OSX
# * Dependencies: minimum requirements, optional requirements
# * Installation methods: setup.py, sdist, wheel, archive

on:
  push:
    branches:
      - master
      - maint/*
  pull_request:
    branches:
      - master
      - maint/*
  schedule:
    - cron: '0 0 * * 1'

defaults:
  run:
    shell: bash

jobs:
  stable:
    # Check each OS, all supported Python, minimum versions and latest releases
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
        python-version: [3.6, 3.7, 3.8, 3.9]
        architecture: ['x64', 'x86']
        install: ['pip']
        check: ['test']
        pip-flags: ['']
        depends: ['REQUIREMENTS']
        optional-depends: ['DEFAULT_OPT_DEPENDS']
        include:
          # Basic dependencies only
          - os: ubuntu-latest
            python-version: 3.6
            install: setup
            check: test
            pip-flags: ''
            depends: REQUIREMENTS
            optional-depends: ''
          # Absolute minimum dependencies
          - os: ubuntu-latest
            python-version: 3.6
            install: setup
            check: test
            pip-flags: ''
            depends: MIN_REQUIREMENTS
            optional-depends: ''
          # Absolute minimum dependencies plus old MPL, Pydicom, Pillow
          - os: ubuntu-latest
            python-version: 3.6
            install: setup
            check: test
            pip-flags: ''
            depends: MIN_REQUIREMENTS
            optional-depends: MIN_OPT_DEPENDS
          # Clean install imports only with package-declared dependencies
          - os: ubuntu-latest
            python-version: 3.6
            install: pip
            check: skiptests
            pip-flags: ''
            depends: ''
          # Check all installation methods
          - os: ubuntu-latest
            python-version: 3.8
            install: wheel
            check: test
            pip-flags: ''
            depends: REQUIREMENTS
            optional-depends: DEFAULT_OPT_DEPENDS
          - os: ubuntu-latest
            python-version: 3.8
            install: sdist
            check: test
            pip-flags: ''
            depends: REQUIREMENTS
            optional-depends: DEFAULT_OPT_DEPENDS
          - os: ubuntu-latest
            python-version: 3.8
            install: archive
            check: test
            pip-flags: ''
            depends: REQUIREMENTS
            optional-depends: DEFAULT_OPT_DEPENDS
        exclude:
          - os: ubuntu-latest
            architecture: x86
          - os: macos-latest
            architecture: x86
    env:
      DEPENDS: ${{ matrix.depends }}
      OPTIONAL_DEPENDS: ${{ matrix.optional-depends }}
      INSTALL_TYPE: ${{ matrix.install }}
      CHECK_TYPE: ${{ matrix.check }}
      EXTRA_PIP_FLAGS: ${{ matrix.pip-flags }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Create virtual environment
        run: tools/ci/create_venv.sh
      - name: Build archive
        run: |
          source tools/ci/build_archive.sh
          echo "ARCHIVE=$ARCHIVE" >> $GITHUB_ENV
      - name: Install dependencies
        run: tools/ci/install_dependencies.sh
      - name: Install NiBabel
        run: tools/ci/install.sh
      - name: Run tests
        run: tools/ci/check.sh
        if: ${{ matrix.check != 'skiptests' }}
      - name: Submit coverage
        run: tools/ci/submit_coverage.sh
        if: ${{ always() }}
      - name: Upload pytest test results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: for_testing/test-results.xml
        if: ${{ always() && matrix.check == 'test' }}
