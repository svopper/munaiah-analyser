name: Build

on:
  push:
  pull_request:
  release:
    types:
      - published
jobs:
  conda:
    name: Conda ${{ matrix.python-version }} - ${{ matrix.os }}

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.8']
        sidx-version: ['1.8.5','1.9.3']

    steps:
    - uses: actions/checkout@v2
    - uses: conda-incubator/setup-miniconda@v2
      with:
        channels: conda-forge
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
    - name: Setup
      shell: bash -l {0}
      run: |
          conda install -c conda-forge numpy libspatialindex=${{ matrix.sidx-version }} -y

    - name: Install
      shell: bash -l {0}
      run: |
        pip install -e .
    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        pip install flake8
        flake8 rtree/
    - name: Test with pytest
      shell: bash -l {0}
      run: |
        pip install pytest
        python -m pytest --doctest-modules rtree tests

  ubuntu:
    name: Ubuntu ${{ matrix.os }}

    runs-on: ubuntu-18.04
    strategy:
      fail-fast: true
      matrix:
        os: ['ubuntu-18.04', 'ubuntu-20.04']

    steps:
    - uses: actions/checkout@v2
    - name: Setup
      shell: bash -l {0}
      run: |
          sudo apt install libspatialindex-c4v5 python3-pip
          python3 -m pip install --upgrade pip
          python3 -m pip install setuptools numpy flake8 pytest

    - name: Build
      shell: bash -l {0}
      run: |
        python3 -m pip install --user .
    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        export PATH=$PATH:/home/runner/.local/bin
        flake8 rtree/
    - name: Test with pytest
      shell: bash -l {0}
      run: |
        python3 -m pytest --doctest-modules rtree tests

  docs:
    name: Docs
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    container: osgeo/proj-docs
    steps:
    - uses: actions/checkout@v2
    - name: Run libspatialindex build
      run: |
        apt-get update -y
        apt-get install -y -qq libspatialindex-dev
        pip3 install --user .
    - name: Print versions
      shell: bash -l {0}
      run: |
          python3 --version
          sphinx-build --version
    - name: Lint .rst files
      shell: bash -l {0}
      run: |
        if find . -name '*.rst' | xargs grep -P '\t'; then echo 'Tabs are bad, please use four spaces in .rst files.'; false; fi
      working-directory: ./docs
    - name: HTML
      shell: bash -l {0}
      run: |
        make html
      working-directory: ./docs
    - name: PDF
      shell: bash -l {0}
      run: |
        make latexpdf
      working-directory: ./docs

  wheels:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      CIBW_SKIP: pp* *-win32
      CIBW_TEST_REQUIRES: pytest numpy
      CIBW_TEST_COMMAND: "pytest -v {project}/tests"
      # we are copying the shared libraries ourselves so skip magical copy
      CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: ""
      CIBW_BEFORE_BUILD_LINUX: "pip install cmake; bash {project}/ci/install_libspatialindex.bash"
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v1
      name: Install Python
      with:
        python-version: '3.7'
    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel==1.6.4
    - name: Run MacOS Preinstall Build
      if: startsWith(matrix.os, 'macos')
      run: |
        # provides sha256sum
        brew install coreutils
        pip install cmake
        bash ci/install_libspatialindex.bash
    - uses: ilammy/msvc-dev-cmd@v1
      if: startsWith(matrix.os, 'windows')
    - name: Run Windows Preinstall Build
      if: startsWith(matrix.os, 'windows')
      run: |
        choco install vcpython27 -f -y
        ci\install_libspatialindex.bat
    - name: Build wheels
      run: |
        python -m cibuildwheel --output-dir wheelhouse
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}-whl
        path: wheelhouse/*.whl

  wheels_aarch64:
    name: Build wheel on aarch64 for ${{ matrix.python_tag }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
       python_tag: [ "cp35-*", "cp36-*", "cp37-*", "cp38-*", "cp39-*"]
    env:
      CIBW_ARCHS_LINUX: aarch64
      CIBW_BUILD: ${{matrix.python_tag}}
      CIBW_TEST_REQUIRES: pytest numpy
      CIBW_TEST_COMMAND: "pytest -v {project}/tests"
      CIBW_BEFORE_BUILD_LINUX: "pip install cmake; bash {project}/ci/install_libspatialindex.bash"

    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v1
      name: Install Python
      with:
        python-version: '3.8'
    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel==1.10.0
    - uses: docker/setup-qemu-action@v1
      name: Set up QEMU
    - name: Build wheels
      run: |
        python -m cibuildwheel --output-dir wheelhouse
    - uses: actions/upload-artifact@v2
      with:
        name: aarch64-whl
        path: wheelhouse/*.whl

  collect-artifacts:
    name: Package and push release

    #needs: [windows-wheel, linux-wheel, osx-wheel, conda, ubuntu]
    needs: [conda, ubuntu, wheels]

    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
      - name: Source
        shell: bash -l {0}
        run: |
            sudo apt install libspatialindex-c4v5 python3-pip
            python3 -m pip install --upgrade pip
            python3 -m pip install setuptools numpy flake8 pytest wheel
            export PATH=$PATH:/home/runner/.local/bin
            python3 setup.py sdist

      - uses: actions/download-artifact@v2
        with:
          path: dist
        name: Download artifacts

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: dist

      - name: Unpack
        shell: bash -l {0}
        working-directory: dist
        run: |
          for f in *whl
          do
            cd "$f"
            cp *.whl ..
            cd ..
          done;
          rm -rf *\-whl
          ls -al

      - uses: pypa/gh-action-pypi-publish@master
        name: Publish package
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
          packages_dir: ./dist
